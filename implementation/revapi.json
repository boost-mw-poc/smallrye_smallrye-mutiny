[ {
  "extension" : "revapi.java",
  "id" : "java",
  "configuration" : {
    "missing-classes" : {
      "behavior" : "report",
      "ignoreMissingAnnotations" : false
    }
  }
}, {
  "extension" : "revapi.filter",
  "configuration" : {
    "elements" : {
      "include" : [ {
        "matcher" : "java-package",
        "match" : "io.smallrye.mutiny"
      }, {
        "matcher" : "java-package",
        "match" : "io.smallrye.mutiny.groups"
      }, {
        "matcher" : "java-package",
        "match" : "io.smallrye.mutiny.helpers.spies"
      }, {
        "matcher" : "java-package",
        "match" : "io.smallrye.mutiny.helpers.test"
      }, {
        "matcher" : "java-package",
        "match" : "io.smallrye.mutiny.infrastructure"
      }, {
        "matcher" : "java-package",
        "match" : "io.smallrye.mutiny.operators"
      }, {
        "matcher" : "java-package",
        "match" : "io.smallrye.mutiny.operators.multi.processors"
      }, {
        "matcher" : "java-package",
        "match" : "io.smallrye.mutiny.subscription"
      }, {
        "matcher" : "java-package",
        "match" : "io.smallrye.mutiny.tuples"
      }, {
        "matcher" : "java-package",
        "match" : "io.smallrye.mutiny.unchecked"
      } ]
    }
  }
}, {
  "extension" : "revapi.differences",
  "id" : "breaking-changes",
  "configuration" : {
    "criticality" : "highlight",
    "minSeverity" : "POTENTIALLY_BREAKING",
    "minCriticality" : "documented",
    "differences" : [
      {
        "ignore": true,
        "code": "java.method.returnTypeChangedCovariantly",
        "old": "method io.smallrye.mutiny.groups.UniAndGroupIterable<T1> io.smallrye.mutiny.groups.UniAndGroupIterable<T1>::usingConcurrencyOf(int) @ io.smallrye.mutiny.groups.UniAndGroup2<T1, T2>",
        "new": "method io.smallrye.mutiny.groups.UniAndGroup2<T1, T2> io.smallrye.mutiny.groups.UniAndGroup2<T1, T2>::usingConcurrencyOf(int)",
        "justification": "Override `usingConcurrencyOf` in `UniAndGroup2` for improved type safety"
      },
      {
        "ignore": true,
        "code": "java.method.returnTypeChangedCovariantly",
        "old": "method io.smallrye.mutiny.groups.UniAndGroupIterable<T1> io.smallrye.mutiny.groups.UniAndGroupIterable<T1>::usingConcurrencyOf(int) @ io.smallrye.mutiny.groups.UniAndGroup3<T1, T2, T3>",
        "new": "method io.smallrye.mutiny.groups.UniAndGroup3<T1, T2, T3> io.smallrye.mutiny.groups.UniAndGroup3<T1, T2, T3>::usingConcurrencyOf(int)",
        "justification": "Override `usingConcurrencyOf` in `UniAndGroup3` for improved type safety"
      },
      {
        "ignore": true,
        "code": "java.method.returnTypeChangedCovariantly",
        "old": "method io.smallrye.mutiny.groups.UniAndGroupIterable<T1> io.smallrye.mutiny.groups.UniAndGroupIterable<T1>::usingConcurrencyOf(int) @ io.smallrye.mutiny.groups.UniAndGroup4<T1, T2, T3, T4>",
        "new": "method io.smallrye.mutiny.groups.UniAndGroup4<T1, T2, T3, T4> io.smallrye.mutiny.groups.UniAndGroup4<T1, T2, T3, T4>::usingConcurrencyOf(int)",
        "justification": "Override `usingConcurrencyOf` in `UniAndGroup4` for improved type safety"
      },
      {
        "ignore": true,
        "code": "java.method.returnTypeChangedCovariantly",
        "old": "method io.smallrye.mutiny.groups.UniAndGroupIterable<T1> io.smallrye.mutiny.groups.UniAndGroupIterable<T1>::usingConcurrencyOf(int) @ io.smallrye.mutiny.groups.UniAndGroup5<T1, T2, T3, T4, T5>",
        "new": "method io.smallrye.mutiny.groups.UniAndGroup5<T1, T2, T3, T4, T5> io.smallrye.mutiny.groups.UniAndGroup5<T1, T2, T3, T4, T5>::usingConcurrencyOf(int)",
        "justification": "Override `usingConcurrencyOf` in `UniAndGroup5` for improved type safety"
      },
      {
        "ignore": true,
        "code": "java.method.returnTypeChangedCovariantly",
        "old": "method io.smallrye.mutiny.groups.UniAndGroupIterable<T1> io.smallrye.mutiny.groups.UniAndGroupIterable<T1>::usingConcurrencyOf(int) @ io.smallrye.mutiny.groups.UniAndGroup6<T1, T2, T3, T4, T5, T6>",
        "new": "method io.smallrye.mutiny.groups.UniAndGroup6<T1, T2, T3, T4, T5, T6> io.smallrye.mutiny.groups.UniAndGroup6<T1, T2, T3, T4, T5, T6>::usingConcurrencyOf(int)",
        "justification": "Override `usingConcurrencyOf` in `UniAndGroup6` for improved type safety"
      },
      {
        "ignore": true,
        "code": "java.method.returnTypeChangedCovariantly",
        "old": "method io.smallrye.mutiny.groups.UniAndGroupIterable<T1> io.smallrye.mutiny.groups.UniAndGroupIterable<T1>::usingConcurrencyOf(int) @ io.smallrye.mutiny.groups.UniAndGroup7<T1, T2, T3, T4, T5, T6, T7>",
        "new": "method io.smallrye.mutiny.groups.UniAndGroup7<T1, T2, T3, T4, T5, T6, T7> io.smallrye.mutiny.groups.UniAndGroup7<T1, T2, T3, T4, T5, T6, T7>::usingConcurrencyOf(int)",
        "justification": "Override `usingConcurrencyOf` in `UniAndGroup7` for improved type safety"
      },
      {
        "ignore": true,
        "code": "java.method.returnTypeChangedCovariantly",
        "old": "method io.smallrye.mutiny.groups.UniAndGroupIterable<T1> io.smallrye.mutiny.groups.UniAndGroupIterable<T1>::usingConcurrencyOf(int) @ io.smallrye.mutiny.groups.UniAndGroup8<T1, T2, T3, T4, T5, T6, T7, T8>",
        "new": "method io.smallrye.mutiny.groups.UniAndGroup8<T1, T2, T3, T4, T5, T6, T7, T8> io.smallrye.mutiny.groups.UniAndGroup8<T1, T2, T3, T4, T5, T6, T7, T8>::usingConcurrencyOf(int)",
        "justification": "Override `usingConcurrencyOf` in `UniAndGroup8` for improved type safety"
      },
      {
        "ignore": true,
        "code": "java.method.returnTypeChangedCovariantly",
        "old": "method io.smallrye.mutiny.groups.UniAndGroupIterable<T1> io.smallrye.mutiny.groups.UniAndGroupIterable<T1>::usingConcurrencyOf(int) @ io.smallrye.mutiny.groups.UniAndGroup9<T1, T2, T3, T4, T5, T6, T7, T8, T9>",
        "new": "method io.smallrye.mutiny.groups.UniAndGroup9<T1, T2, T3, T4, T5, T6, T7, T8, T9> io.smallrye.mutiny.groups.UniAndGroup9<T1, T2, T3, T4, T5, T6, T7, T8, T9>::usingConcurrencyOf(int)",
        "justification": "Override `usingConcurrencyOf` in `UniAndGroup9` for improved type safety"
      }
    ]
  }
}, {
  "extension" : "revapi.reporter.json",
  "configuration" : {
    "minSeverity" : "POTENTIALLY_BREAKING",
    "minCriticality" : "documented",
    "output" : "target/compatibility.json",
    "indent" : true,
    "append" : false,
    "keepEmptyFile" : true
  }
}, {
  "extension" : "revapi.reporter.text",
  "configuration" : {
    "minSeverity" : "POTENTIALLY_BREAKING",
    "minCriticality" : "documented",
    "output" : "out"
  }
} ]