[ {
  "extension" : "revapi.java",
  "id" : "java",
  "configuration" : {
    "missing-classes" : {
      "behavior" : "report",
      "ignoreMissingAnnotations" : false
    }
  }
}, {
  "extension" : "revapi.filter",
  "configuration" : {
    "elements" : {
      "include" : [ {
        "matcher" : "java-package",
        "match" : "io.smallrye.mutiny"
      }, {
        "matcher" : "java-package",
        "match" : "io.smallrye.mutiny.groups"
      }, {
        "matcher" : "java-package",
        "match" : "io.smallrye.mutiny.helpers.spies"
      }, {
        "matcher" : "java-package",
        "match" : "io.smallrye.mutiny.helpers.test"
      }, {
        "matcher" : "java-package",
        "match" : "io.smallrye.mutiny.infrastructure"
      }, {
        "matcher" : "java-package",
        "match" : "io.smallrye.mutiny.operators"
      }, {
        "matcher" : "java-package",
        "match" : "io.smallrye.mutiny.operators.multi.processors"
      }, {
        "matcher" : "java-package",
        "match" : "io.smallrye.mutiny.subscription"
      }, {
        "matcher" : "java-package",
        "match" : "io.smallrye.mutiny.tuples"
      }, {
        "matcher" : "java-package",
        "match" : "io.smallrye.mutiny.unchecked"
      } ]
    }
  }
}, {
  "extension" : "revapi.differences",
  "id" : "breaking-changes",
  "configuration" : {
    "criticality" : "highlight",
    "minSeverity" : "POTENTIALLY_BREAKING",
    "minCriticality" : "documented",
    "differences" : [ {
      "ignore": true,
      "code": "java.method.returnTypeTypeParametersChanged",
      "old": "method io.smallrye.mutiny.groups.UniOnFailure<T> io.smallrye.mutiny.Uni<T>::onFailure()",
      "new": "method io.smallrye.mutiny.groups.UniOnFailure<T, ?> io.smallrye.mutiny.Uni<T>::onFailure()",
      "justification": "To allow expressing the type of the Throwable in case of onFailure(SomeException.class)"
    },
      {
        "ignore": true,
        "code": "java.method.returnTypeTypeParametersChanged",
        "old": "method io.smallrye.mutiny.groups.UniOnFailure<T> io.smallrye.mutiny.Uni<T>::onFailure(java.lang.Class<? extends java.lang.Throwable>)",
        "new": "method <E extends java.lang.Throwable> io.smallrye.mutiny.groups.UniOnFailure<T, E> io.smallrye.mutiny.Uni<T>::onFailure(java.lang.Class<E>)",
        "justification": "To allow expressing the type of the Throwable in case of onFailure(SomeException.class)"
      },
      {
        "ignore": true,
        "code": "java.generics.elementNowParameterized",
        "old": "method io.smallrye.mutiny.groups.UniOnFailure<T> io.smallrye.mutiny.Uni<T>::onFailure(java.lang.Class<? extends java.lang.Throwable>)",
        "new": "method <E extends java.lang.Throwable> io.smallrye.mutiny.groups.UniOnFailure<T, E> io.smallrye.mutiny.Uni<T>::onFailure(java.lang.Class<E>)",
        "justification": "To allow expressing the type of the Throwable in case of onFailure(SomeException.class)"
      },
      {
        "ignore": true,
        "code": "java.generics.formalTypeParameterAdded",
        "old": "method io.smallrye.mutiny.groups.UniOnFailure<T> io.smallrye.mutiny.Uni<T>::onFailure(java.lang.Class<? extends java.lang.Throwable>)",
        "new": "method <E extends java.lang.Throwable> io.smallrye.mutiny.groups.UniOnFailure<T, E> io.smallrye.mutiny.Uni<T>::onFailure(java.lang.Class<E>)",
        "typeParameter": "E extends java.lang.Throwable",
        "justification": "To allow expressing the type of the Throwable in case of onFailure(SomeException.class)"
      },
      {
        "ignore": true,
        "code": "java.method.returnTypeTypeParametersChanged",
        "old": "method io.smallrye.mutiny.groups.UniOnFailure<T> io.smallrye.mutiny.Uni<T>::onFailure(java.util.function.Predicate<? super java.lang.Throwable>)",
        "new": "method io.smallrye.mutiny.groups.UniOnFailure<T, ?> io.smallrye.mutiny.Uni<T>::onFailure(java.util.function.Predicate<? super java.lang.Throwable>)",
        "justification": "To allow expressing the type of the Throwable in case of onFailure(SomeException.class)"
      },
      {
        "ignore": true,
        "code": "java.method.numberOfParametersChanged",
        "old": "method void io.smallrye.mutiny.groups.UniOnFailure<T>::<init>(io.smallrye.mutiny.Uni<T>, java.util.function.Predicate<? super java.lang.Throwable>)",
        "new": "method void io.smallrye.mutiny.groups.UniOnFailure<T, E extends java.lang.Throwable>::<init>(io.smallrye.mutiny.Uni<T>, java.lang.Class<E>, java.util.function.Predicate<? super java.lang.Throwable>)",
        "justification": "To allow expressing the type of the Throwable in case of onFailure(SomeException.class)"
      },
      {
        "ignore": true,
        "code": "java.method.parameterTypeParameterChanged",
        "old": "parameter io.smallrye.mutiny.Uni<T> io.smallrye.mutiny.groups.UniOnFailure<T>::transform(===java.util.function.Function<? super java.lang.Throwable, ? extends java.lang.Throwable>===)",
        "new": "parameter io.smallrye.mutiny.Uni<T> io.smallrye.mutiny.groups.UniOnFailure<T, E extends java.lang.Throwable>::transform(===java.util.function.Function<E, ? extends java.lang.Throwable>===)",
        "parameterIndex": "0",
        "justification": "To allow expressing the type of the Throwable in case of onFailure(SomeException.class)"
      },
      {
        "ignore": true,
        "code": "java.generics.formalTypeParameterAdded",
        "old": "class io.smallrye.mutiny.groups.UniOnFailure<T>",
        "new": "class io.smallrye.mutiny.groups.UniOnFailure<T, E extends java.lang.Throwable>",
        "typeParameter": "E extends java.lang.Throwable",
        "justification": "To allow expressing the type of the Throwable in case of onFailure(SomeException.class)"
      },
      {
        "ignore": true,
        "code": "java.method.returnTypeTypeParametersChanged",
        "old": "method io.smallrye.mutiny.groups.UniOnFailure<T> io.smallrye.mutiny.operators.AbstractUni<T>::onFailure()",
        "new": "method io.smallrye.mutiny.groups.UniOnFailure<T, ? extends java.lang.Throwable> io.smallrye.mutiny.operators.AbstractUni<T>::onFailure()",
        "justification": "To allow expressing the type of the Throwable in case of onFailure(SomeException.class)"
      },
      {
        "ignore": true,
        "code": "java.method.returnTypeTypeParametersChanged",
        "old": "method io.smallrye.mutiny.groups.UniOnFailure<T> io.smallrye.mutiny.operators.AbstractUni<T>::onFailure(java.lang.Class<? extends java.lang.Throwable>)",
        "new": "method <E extends java.lang.Throwable> io.smallrye.mutiny.groups.UniOnFailure<T, E> io.smallrye.mutiny.operators.AbstractUni<T>::onFailure(java.lang.Class<E>)",
        "justification": "To allow expressing the type of the Throwable in case of onFailure(SomeException.class)"
      },
      {
        "ignore": true,
        "code": "java.generics.elementNowParameterized",
        "old": "method io.smallrye.mutiny.groups.UniOnFailure<T> io.smallrye.mutiny.operators.AbstractUni<T>::onFailure(java.lang.Class<? extends java.lang.Throwable>)",
        "new": "method <E extends java.lang.Throwable> io.smallrye.mutiny.groups.UniOnFailure<T, E> io.smallrye.mutiny.operators.AbstractUni<T>::onFailure(java.lang.Class<E>)",
        "justification": "To allow expressing the type of the Throwable in case of onFailure(SomeException.class)"
      },
      {
        "ignore": true,
        "code": "java.generics.formalTypeParameterAdded",
        "old": "method io.smallrye.mutiny.groups.UniOnFailure<T> io.smallrye.mutiny.operators.AbstractUni<T>::onFailure(java.lang.Class<? extends java.lang.Throwable>)",
        "new": "method <E extends java.lang.Throwable> io.smallrye.mutiny.groups.UniOnFailure<T, E> io.smallrye.mutiny.operators.AbstractUni<T>::onFailure(java.lang.Class<E>)",
        "typeParameter": "E extends java.lang.Throwable",
        "justification": "To allow expressing the type of the Throwable in case of onFailure(SomeException.class)"
      },
      {
        "ignore": true,
        "code": "java.method.returnTypeTypeParametersChanged",
        "old": "method io.smallrye.mutiny.groups.UniOnFailure<T> io.smallrye.mutiny.operators.AbstractUni<T>::onFailure(java.util.function.Predicate<? super java.lang.Throwable>)",
        "new": "method io.smallrye.mutiny.groups.UniOnFailure<T, ? extends java.lang.Throwable> io.smallrye.mutiny.operators.AbstractUni<T>::onFailure(java.util.function.Predicate<? super java.lang.Throwable>)",
        "justification": "To allow expressing the type of the Throwable in case of onFailure(SomeException.class)"
      },
      {
        "ignore": true,
        "code": "java.method.numberOfParametersChanged",
        "old": "method void io.smallrye.mutiny.operators.uni.UniOnFailureTransform<I, O>::<init>(io.smallrye.mutiny.Uni<I>, java.util.function.Predicate<? super java.lang.Throwable>, java.util.function.Function<? super java.lang.Throwable, ? extends java.lang.Throwable>)",
        "new": "method void io.smallrye.mutiny.operators.uni.UniOnFailureTransform<I, O, E extends java.lang.Throwable>::<init>(io.smallrye.mutiny.Uni<I>, java.util.function.Predicate<? super java.lang.Throwable>, java.util.function.Function<E, ? extends java.lang.Throwable>, java.lang.Class<E>)",
        "justification": "To allow expressing the type of the Throwable in case of onFailure(SomeException.class)"
      },
      {
        "ignore": true,
        "code": "java.generics.formalTypeParameterAdded",
        "old": "class io.smallrye.mutiny.operators.uni.UniOnFailureTransform<I, O>",
        "new": "class io.smallrye.mutiny.operators.uni.UniOnFailureTransform<I, O, E extends java.lang.Throwable>",
        "typeParameter": "E extends java.lang.Throwable",
        "justification": "To allow expressing the type of the Throwable in case of onFailure(SomeException.class)"
      },
      {
        "ignore": true,
        "code": "java.method.parameterTypeParameterChanged",
        "old": "parameter io.smallrye.mutiny.Uni<T> io.smallrye.mutiny.groups.UniOnFailure<T>::call(===java.util.function.Function<java.lang.Throwable, io.smallrye.mutiny.Uni<?>>===)",
        "new": "parameter io.smallrye.mutiny.Uni<T> io.smallrye.mutiny.groups.UniOnFailure<T, E extends java.lang.Throwable>::call(===java.util.function.Function<E, io.smallrye.mutiny.Uni<?>>===)",
        "parameterIndex": "0",
        "justification": "To allow expressing the type of the Throwable in case of onFailure(SomeException.class)"
      },
      {
        "ignore": true,
        "code": "java.method.parameterTypeParameterChanged",
        "old": "parameter io.smallrye.mutiny.Uni<T> io.smallrye.mutiny.groups.UniOnFailure<T>::invoke(===java.util.function.Consumer<java.lang.Throwable>===)",
        "new": "parameter io.smallrye.mutiny.Uni<T> io.smallrye.mutiny.groups.UniOnFailure<T, E extends java.lang.Throwable>::invoke(===java.util.function.Consumer<E>===)",
        "parameterIndex": "0",
        "justification": "To allow expressing the type of the Throwable in case of onFailure(SomeException.class)"
      },
      {
        "ignore": true,
        "code": "java.method.parameterTypeParameterChanged",
        "old": "parameter io.smallrye.mutiny.Uni<T> io.smallrye.mutiny.groups.UniOnFailure<T>::recoverWithItem(===java.util.function.Function<? super java.lang.Throwable, ? extends T>===)",
        "new": "parameter io.smallrye.mutiny.Uni<T> io.smallrye.mutiny.groups.UniOnFailure<T, E extends java.lang.Throwable>::recoverWithItem(===java.util.function.Function<E, ? extends T>===)",
        "parameterIndex": "0",
        "justification": "To allow expressing the type of the Throwable in case of onFailure(SomeException.class)"
      },
      {
        "ignore": true,
        "code": "java.method.parameterTypeParameterChanged",
        "old": "parameter io.smallrye.mutiny.Uni<T> io.smallrye.mutiny.groups.UniOnFailure<T>::recoverWithUni(===java.util.function.Function<? super java.lang.Throwable, io.smallrye.mutiny.Uni<? extends T>>===)",
        "new": "parameter io.smallrye.mutiny.Uni<T> io.smallrye.mutiny.groups.UniOnFailure<T, E extends java.lang.Throwable>::recoverWithUni(===java.util.function.Function<E, io.smallrye.mutiny.Uni<? extends T>>===)",
        "parameterIndex": "0",
        "justification": "To allow expressing the type of the Throwable in case of onFailure(SomeException.class)"
      },
      {
        "ignore": true,
        "code": "java.method.numberOfParametersChanged",
        "old": "method void io.smallrye.mutiny.operators.uni.UniOnFailureFlatMap<I>::<init>(io.smallrye.mutiny.Uni<I>, java.util.function.Predicate<? super java.lang.Throwable>, java.util.function.Function<? super java.lang.Throwable, io.smallrye.mutiny.Uni<? extends I>>)",
        "new": "method void io.smallrye.mutiny.operators.uni.UniOnFailureFlatMap<I, E>::<init>(io.smallrye.mutiny.Uni<I>, java.util.function.Predicate<? super java.lang.Throwable>, java.util.function.Function<E, io.smallrye.mutiny.Uni<? extends I>>, java.lang.Class<E>)",
        "justification": "To allow expressing the type of the Throwable in case of onFailure(SomeException.class)"
      },
      {
        "ignore": true,
        "code": "java.generics.formalTypeParameterAdded",
        "old": "class io.smallrye.mutiny.operators.uni.UniOnFailureFlatMap<I>",
        "new": "class io.smallrye.mutiny.operators.uni.UniOnFailureFlatMap<I, E>",
        "typeParameter": "E",
        "justification": "To allow expressing the type of the Throwable in case of onFailure(SomeException.class)"
      },
      {
        "ignore": true,
        "code": "java.method.numberOfParametersChanged",
        "old": "method void io.smallrye.mutiny.operators.uni.UniOnItemConsume<T>::<init>(io.smallrye.mutiny.Uni<? extends T>, java.util.function.Consumer<? super T>, java.util.function.Consumer<java.lang.Throwable>, java.util.function.Predicate<? super java.lang.Throwable>)",
        "new": "method void io.smallrye.mutiny.operators.uni.UniOnItemConsume<T, E>::<init>(io.smallrye.mutiny.Uni<? extends T>, java.util.function.Consumer<? super T>, java.util.function.Consumer<E>, java.util.function.Predicate<? super java.lang.Throwable>, java.lang.Class<E>)",
        "justification": "To allow expressing the type of the Throwable in case of onFailure(SomeException.class)"
      },
      {
        "ignore": true,
        "code": "java.generics.formalTypeParameterAdded",
        "old": "class io.smallrye.mutiny.operators.uni.UniOnItemConsume<T>",
        "new": "class io.smallrye.mutiny.operators.uni.UniOnItemConsume<T, E>",
        "typeParameter": "E",
        "justification": "To allow expressing the type of the Throwable in case of onFailure(SomeException.class)"
      },
      {
        "ignore": true,
        "code": "java.method.returnTypeTypeParametersChanged",
        "old": "method io.smallrye.mutiny.groups.UniOnFailure<T> io.smallrye.mutiny.Uni<T>::onFailure()",
        "new": "method io.smallrye.mutiny.groups.UniOnFailure<T, java.lang.Throwable> io.smallrye.mutiny.Uni<T>::onFailure()",
        "justification": "To allow expressing the type of the Throwable in case of onFailure(SomeException.class)"
      },
      {
        "ignore": true,
        "code": "java.method.returnTypeTypeParametersChanged",
        "old": "method io.smallrye.mutiny.groups.UniOnFailure<T> io.smallrye.mutiny.Uni<T>::onFailure(java.util.function.Predicate<? super java.lang.Throwable>)",
        "new": "method io.smallrye.mutiny.groups.UniOnFailure<T, java.lang.Throwable> io.smallrye.mutiny.Uni<T>::onFailure(java.util.function.Predicate<? super java.lang.Throwable>)",
        "justification": "To allow expressing the type of the Throwable in case of onFailure(SomeException.class)"
      },
      {
        "ignore": true,
        "code": "java.method.returnTypeTypeParametersChanged",
        "old": "method io.smallrye.mutiny.groups.UniOnFailure<T> io.smallrye.mutiny.operators.AbstractUni<T>::onFailure()",
        "new": "method io.smallrye.mutiny.groups.UniOnFailure<T, java.lang.Throwable> io.smallrye.mutiny.operators.AbstractUni<T>::onFailure()",
        "justification": "To allow expressing the type of the Throwable in case of onFailure(SomeException.class)"
      },
      {
        "ignore": true,
        "code": "java.method.returnTypeTypeParametersChanged",
        "old": "method io.smallrye.mutiny.groups.UniOnFailure<T> io.smallrye.mutiny.operators.AbstractUni<T>::onFailure(java.util.function.Predicate<? super java.lang.Throwable>)",
        "new": "method io.smallrye.mutiny.groups.UniOnFailure<T, java.lang.Throwable> io.smallrye.mutiny.operators.AbstractUni<T>::onFailure(java.util.function.Predicate<? super java.lang.Throwable>)",
        "justification": "To allow expressing the type of the Throwable in case of onFailure(SomeException.class)"
      }
    ]
  }
}, {
  "extension" : "revapi.reporter.json",
  "configuration" : {
    "minSeverity" : "POTENTIALLY_BREAKING",
    "minCriticality" : "documented",
    "output" : "target/compatibility.json",
    "indent" : true,
    "append" : false,
    "keepEmptyFile" : true
  }
}, {
  "extension" : "revapi.reporter.text",
  "configuration" : {
    "minSeverity" : "POTENTIALLY_BREAKING",
    "minCriticality" : "documented",
    "output" : "out"
  }
} ]